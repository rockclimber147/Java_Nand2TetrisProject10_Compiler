<class>
    <keyword> class </keyword>
    <identifier> Main </identifier>
    <symbol> { </symbol>
    <classVarDec>
        <keyword> field </keyword>
        <identifier> Main </identifier>
        <identifier> main (kind: FIELD type: Main index: 0) </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <keyword> int </keyword>
        <identifier> test (kind: FIELD type: int index: 1) </identifier>
        <symbol> , </symbol>
        <identifier> test2 </identifier>
        <symbol> , </symbol>
        <identifier> test3 </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> main </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> main </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Main </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> constructor </keyword>
        <identifier> Main </identifier>
        <identifier> new </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> test </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> test2 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 2 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> test3 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 3 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant>   </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>
