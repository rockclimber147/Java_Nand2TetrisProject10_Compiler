/**
 * Represents a Pong game.
 *//** Constructs a new Pong game. *//*
STATIC PongGame instance -> static   0
FIELD  Bat      bat      -> this     0
FIELD  Ball     ball     -> this     1
FIELD  int      wall     -> this     2
FIELD  boolean  exit     -> this     3
FIELD  int      score    -> this     4
FIELD  int      lastWall -> this     5
FIELD  int      batWidth -> this     6
*/
    
function PongGame.new 0
/*
*/
    push constant 7
    call Memory.alloc 1
    pop pointer 0
    call Screen.clearScreen 0
    pop temp 0
    push constant 50
    pop this 6
    push constant 230
    push constant 229
    push this 6
    push constant 7
    call Bat.new 4
    pop this 0
    push constant 253
    push constant 222
    push constant 0
    push constant 511
    push constant 0
    push constant 229
    call Ball.new 6
    pop this 1
    push this 1
    push constant 400
    push constant 0
    call Ball.setDestination 3
    pop temp 0
    push constant 0
    push constant 238
    push constant 511
    push constant 240
    call Screen.drawRectangle 4
    pop temp 0
    push constant 22
    push constant 0
    call Output.moveCursor 2
    pop temp 0
    push constant 8
    call String.new 1
    push constant 83
    call String.appendChar 2
    push constant 99
    call String.appendChar 2
    push constant 111
    call String.appendChar 2
    push constant 114
    call String.appendChar 2
    push constant 101
    call String.appendChar 2
    push constant 58
    call String.appendChar 2
    push constant 32
    call String.appendChar 2
    push constant 48
    call String.appendChar 2
    call Output.printString 1
    pop temp 0
    push constant 0
    pop this 3
    push constant 0
    pop this 4
    push constant 0
    pop this 2
    push constant 0
    pop this 5
    push pointer 0
    return
/** Deallocates the object's memory. */    
function PongGame.dispose 0
/*
ARG    PongGame this -> argument 0
*/
    push argument 0
    pop pointer 0
    push this 0
    call Bat.dispose 1
    pop temp 0
    push this 1
    call Ball.dispose 1
    pop temp 0
    push pointer 0
    call Memory.deAlloc 1
    pop temp 0
    push constant 0
    return
/** Creates an instance of Pong game, and stores it. */    
function PongGame.newInstance 0
/*
*/
    call PongGame.new 0
    pop static 0
    push constant 0
    return
/** Returns the single instance of this Pong game. */    
function PongGame.getInstance 0
/*
*/
    push static 0
    return
/** Starts the game, and andles inputs from the user that control
     *  the bat's movement direction. */    
function PongGame.run 1
/*
ARG    PongGame this -> argument 0
VAR    char     key  -> local    0
*/
    push argument 0
    pop pointer 0
label PongGame.run_LOOP_START_0
    push this 3
    not
    not
    if-goto PongGame.run_LOOP_END_0
label PongGame.run_LOOP_START_1
    push local 0
    push constant 0
    eq
    push this 3
    not
    and
    not
    if-goto PongGame.run_LOOP_END_1
    call Keyboard.keyPressed 0
    pop local 0
    push this 0
    call Bat.move 1
    pop temp 0
    push pointer 0
    call PongGame.moveBall 1
    pop temp 0
    push constant 50
    call Sys.wait 1
    pop temp 0
    goto PongGame.run_LOOP_START_1
label PongGame.run_LOOP_END_1
    push local 0
    push constant 130
    eq
    not
    if-goto PongGame.run_FALSE_0
    push this 0
    push constant 1
    call Bat.setDirection 2
    pop temp 0
    goto PongGame.run_TRUE_0
label PongGame.run_FALSE_0
    push local 0
    push constant 132
    eq
    not
    if-goto PongGame.run_FALSE_1
    push this 0
    push constant 2
    call Bat.setDirection 2
    pop temp 0
    goto PongGame.run_TRUE_1
label PongGame.run_FALSE_1
    push local 0
    push constant 140
    eq
    not
    if-goto PongGame.run_FALSE_2
    push constant 1
    neg
    pop this 3
    goto PongGame.run_TRUE_2
label PongGame.run_FALSE_2
label PongGame.run_TRUE_2
label PongGame.run_TRUE_1
label PongGame.run_TRUE_0
label PongGame.run_LOOP_START_3
    push local 0
    push constant 0
    eq
    not
    push this 3
    not
    and
    not
    if-goto PongGame.run_LOOP_END_3
    call Keyboard.keyPressed 0
    pop local 0
    push this 0
    call Bat.move 1
    pop temp 0
    push pointer 0
    call PongGame.moveBall 1
    pop temp 0
    push constant 50
    call Sys.wait 1
    pop temp 0
    goto PongGame.run_LOOP_START_3
label PongGame.run_LOOP_END_3
    goto PongGame.run_LOOP_START_0
label PongGame.run_LOOP_END_0
    push this 3
    not
    if-goto PongGame.run_FALSE_3
    push constant 10
    push constant 27
    call Output.moveCursor 2
    pop temp 0
    push constant 9
    call String.new 1
    push constant 71
    call String.appendChar 2
    push constant 97
    call String.appendChar 2
    push constant 109
    call String.appendChar 2
    push constant 101
    call String.appendChar 2
    push constant 32
    call String.appendChar 2
    push constant 79
    call String.appendChar 2
    push constant 118
    call String.appendChar 2
    push constant 101
    call String.appendChar 2
    push constant 114
    call String.appendChar 2
    call Output.printString 1
    pop temp 0
    goto PongGame.run_TRUE_3
label PongGame.run_FALSE_3
label PongGame.run_TRUE_3
    push constant 0
    return
/**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */    
function PongGame.moveBall 5
/*
ARG    PongGame this              -> argument 0
VAR    int      bouncingDirection -> local    0
VAR    int      batLeft           -> local    1
VAR    int      batRight          -> local    2
VAR    int      ballLeft          -> local    3
VAR    int      ballRight         -> local    4
*/
    push argument 0
    pop pointer 0
    push this 1
    call Ball.move 1
    pop this 2
    push this 2
    push constant 0
    gt
    push this 2
    push this 5
    eq
    not
    and
    not
    if-goto PongGame.moveBall_FALSE_0
    push this 2
    pop this 5
    push constant 0
    pop local 0
    push this 0
    call Bat.getLeft 1
    pop local 1
    push this 0
    call Bat.getRight 1
    pop local 2
    push this 1
    call Ball.getLeft 1
    pop local 3
    push this 1
    call Ball.getRight 1
    pop local 4
    push this 2
    push constant 4
    eq
    not
    if-goto PongGame.moveBall_FALSE_1
    push local 1
    push local 4
    gt
    push local 2
    push local 3
    lt
    or
    pop this 3
    push this 3
    not
    not
    if-goto PongGame.moveBall_FALSE_2
    push local 4
    push local 1
    push constant 10
    add
    lt
    not
    if-goto PongGame.moveBall_FALSE_3
    push constant 1
    neg
    pop local 0
    goto PongGame.moveBall_TRUE_3
label PongGame.moveBall_FALSE_3
    push local 3
    push local 2
    push constant 10
    sub
    gt
    not
    if-goto PongGame.moveBall_FALSE_4
    push constant 1
    pop local 0
    goto PongGame.moveBall_TRUE_4
label PongGame.moveBall_FALSE_4
label PongGame.moveBall_TRUE_4
label PongGame.moveBall_TRUE_3
    push this 6
    push constant 2
    sub
    pop this 6
    push this 0
    push this 6
    call Bat.setWidth 2
    pop temp 0
    push this 4
    push constant 1
    add
    pop this 4
    push constant 22
    push constant 7
    call Output.moveCursor 2
    pop temp 0
    push this 4
    call Output.printInt 1
    pop temp 0
    goto PongGame.moveBall_TRUE_2
label PongGame.moveBall_FALSE_2
label PongGame.moveBall_TRUE_2
    goto PongGame.moveBall_TRUE_1
label PongGame.moveBall_FALSE_1
label PongGame.moveBall_TRUE_1
    push this 1
    push local 0
    call Ball.bounce 2
    pop temp 0
    goto PongGame.moveBall_TRUE_0
label PongGame.moveBall_FALSE_0
label PongGame.moveBall_TRUE_0
    push constant 0
    return
